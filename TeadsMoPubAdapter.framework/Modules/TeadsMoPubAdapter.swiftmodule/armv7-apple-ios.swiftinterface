// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TeadsMoPubAdapter
import Foundation
import MoPub
import Swift
@_exported import TeadsMoPubAdapter
import TeadsSDK
import UIKit
@objc public class MPAdapterTeadsInterstitial : MPInterstitialCustomEvent {
  @objc override dynamic public func requestInterstitial(withCustomEventInfo info: [Swift.AnyHashable : Any]!, adMarkup: Swift.String!)
  @objc override dynamic public init()
  @objc deinit
}
extension MPAdapterTeadsInterstitial : TeadsSDK.TFAInterstitialAdDelegate {
  @objc dynamic public func interstitialDidReceiveAd(_ ad: TeadsSDK.TFAInterstitialAd)
  @objc dynamic public func interstitial(_ ad: TeadsSDK.TFAInterstitialAd, didFailToReceiveAdWithError error: Swift.String)
  @objc dynamic public func interstitialWillOpen(_ ad: TeadsSDK.TFAInterstitialAd)
  @objc dynamic public func interstitialWillClose(_ ad: TeadsSDK.TFAInterstitialAd)
  @objc dynamic public func interstitialDidOpen(_ ad: TeadsSDK.TFAInterstitialAd)
  @objc dynamic public func interstitialDidClose(_ ad: TeadsSDK.TFAInterstitialAd)
  @objc dynamic public func interstitialBrowserDidOpen(_ ad: TeadsSDK.TFAInterstitialAd)
  @objc dynamic public func interstitialBrowserDidClose(_ ad: TeadsSDK.TFAInterstitialAd)
  @objc dynamic public func interstitialWillLeaveApplication(_ ad: TeadsSDK.TFAInterstitialAd)
}
@objc public class MPAdapterTeadsRewardedVideo : MPRewardedVideoCustomEvent {
  @objc override dynamic public func requestRewardedVideo(withCustomEventInfo info: [Swift.AnyHashable : Any]!, adMarkup: Swift.String!)
  @objc override dynamic public func hasAdAvailable() -> Swift.Bool
  @objc override dynamic public func presentRewardedVideo(from viewController: UIKit.UIViewController!)
  @objc override dynamic public func handleInvalidated()
  @objc override dynamic public init()
  @objc deinit
}
extension MPAdapterTeadsRewardedVideo : TeadsSDK.TFARewardedAdDelegate {
  @objc dynamic public func rewardedAdDidReceive(_ rewardedAd: TeadsSDK.TFARewardedAd)
  @objc dynamic public func rewarded(_ rewardedAd: TeadsSDK.TFARewardedAd, didFailToReceiveAdWithError: Swift.String)
  @objc dynamic public func rewarded(_ rewardedAd: TeadsSDK.TFARewardedAd, didRewardUserWith reward: TeadsSDK.TFAReward?)
  @objc dynamic public func rewardedAdDidOpen(_ rewardedAd: TeadsSDK.TFARewardedAd)
  @objc dynamic public func rewardedAdDidStartPlaying(_ rewardedAd: TeadsSDK.TFARewardedAd)
  @objc dynamic public func rewardedAdDidCompletePlaying(_ rewardedAd: TeadsSDK.TFARewardedAd)
  @objc dynamic public func rewardedAdWillLeaveApplication(_ rewardedAd: TeadsSDK.TFARewardedAd)
  @objc dynamic public func rewardedAdDidClose(_ rewardedAd: TeadsSDK.TFARewardedAd)
  @objc dynamic public func rewardedAdBrowserDidOpen(_ rewardedAd: TeadsSDK.TFARewardedAd)
}
@objc public class MPAdapterTeadsNative : MPNativeCustomEvent {
  @objc override dynamic public func requestAd(withCustomEventInfo info: [Swift.AnyHashable : Any]!, adMarkup: Swift.String!)
  @objc override dynamic public init()
  @objc deinit
}
extension MPAdapterTeadsNative : TeadsSDK.TeadsAdPlacementDelegate {
  @objc dynamic public func adPlacement(_ adPlacement: TeadsSDK.TeadsAdPlacement, didReceiveNativeAd nativeAd: TeadsSDK.TeadsNativeAd)
  @objc dynamic public func adPlacement(_ adPlacement: TeadsSDK.TeadsAdPlacement, didFailToReceiveAd adFailReason: TeadsSDK.AdFailReason)
}
@objc public class MPAdapterTeadsNativeAdRendererSettings : ObjectiveC.NSObject, MPNativeAdRendererSettings {
  @objc public var viewSizeHandler: MPNativeViewSizeHandler!
  @objc public var renderingViewClass: Swift.AnyClass?
  @objc public var adViewContainer: UIKit.UIView?
  @objc override dynamic public init()
  @objc deinit
}
@objc extension MPAdView {
  @objc dynamic public func register(teadsAdSettings: TeadsSDK.TeadsAdSettings)
}
extension TeadsAdSettings : MPMediationSettingsProtocol {
}
@objc extension MPNativeAdRequestTargeting {
  @objc dynamic public func register(teadsAdSettings: TeadsSDK.TeadsAdSettings)
}
public struct MPAdapterTeadsConstants {
}
public enum TeadsAdapterErrorCode : Swift.Int {
  case pidNotFound
  case loadingFailure
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class MPAdapterTeadsBanner : MPBannerCustomEvent {
  @objc override dynamic public func requestAd(with size: CoreGraphics.CGSize, customEventInfo info: [Swift.AnyHashable : Any]!, adMarkup: Swift.String!)
  @objc override dynamic public init()
  @objc deinit
}
extension MPAdapterTeadsBanner : TeadsSDK.TFAAdDelegate {
  @objc dynamic public func didReceiveAd(_ ad: TeadsSDK.TFAAdView, adRatio: CoreGraphics.CGFloat)
  @objc dynamic public func didFailToReceiveAd(_ ad: TeadsSDK.TFAAdView, adFailReason: TeadsSDK.AdFailReason)
  @objc dynamic public func adClose(_ ad: TeadsSDK.TFAAdView, userAction: Swift.Bool)
  @objc dynamic public func adError(_ ad: TeadsSDK.TFAAdView, errorMessage: Swift.String)
  @objc dynamic public func adBrowserDidOpen(_ ad: TeadsSDK.TFAAdView)
  @objc dynamic public func adBrowserDidClose(_ ad: TeadsSDK.TFAAdView)
  @objc dynamic public func adDidOpenFullscreen(_ ad: TeadsSDK.TFAAdView)
  @objc dynamic public func adDidCloseFullscreen(_ ad: TeadsSDK.TFAAdView)
  @objc dynamic public func adPlaybackChange(_ ad: TeadsSDK.TFAAdView, state: TeadsSDK.TFAAdView.TeadsAdPlaybackState)
  @objc dynamic public func adDidChangeVolume(_ ad: TeadsSDK.TFAAdView, muted: Swift.Bool)
}
@objc public class MPAdapterTeadsNativeAdRenderer : ObjectiveC.NSObject, MPNativeAdRenderer {
  @objc public var viewSizeHandler: MPNativeViewSizeHandler!
  @objc required public init!(rendererSettings: MPNativeAdRendererSettings!)
  @objc public static func rendererConfiguration(with rendererSettings: MPNativeAdRendererSettings!) -> MPNativeAdRendererConfiguration!
  @objc public func retrieveView(with adapter: MPNativeAdAdapter!) throws -> UIKit.UIView
  @objc override dynamic public init()
  @objc deinit
}
extension TeadsMoPubAdapter.TeadsAdapterErrorCode : Swift.Equatable {}
extension TeadsMoPubAdapter.TeadsAdapterErrorCode : Swift.Hashable {}
extension TeadsMoPubAdapter.TeadsAdapterErrorCode : Swift.RawRepresentable {}
